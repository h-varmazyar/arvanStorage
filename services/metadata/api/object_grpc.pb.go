// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: services/metadata/api/src/object.proto

package api

import (
	context "context"
	api "github.com/h-varmazyar/arvanStorage/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObjectServiceClient is the client API for ObjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectServiceClient interface {
	List(ctx context.Context, in *ObjectListReq, opts ...grpc.CallOption) (*Objects, error)
	Return(ctx context.Context, in *ObjectReturnReq, opts ...grpc.CallOption) (*Object, error)
	Delete(ctx context.Context, in *ObjectDeleteReq, opts ...grpc.CallOption) (*api.Void, error)
	NewUpload(ctx context.Context, in *ObjectNewUploadReq, opts ...grpc.CallOption) (*ObjectNewUploadResp, error)
	UploadPart(ctx context.Context, in *ObjectUploadPartReq, opts ...grpc.CallOption) (*api.Void, error)
	CompleteUpload(ctx context.Context, in *ObjectCompleteUploadReq, opts ...grpc.CallOption) (*api.Void, error)
	AbortUpload(ctx context.Context, in *ObjectAbortUploadReq, opts ...grpc.CallOption) (*api.Void, error)
}

type objectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectServiceClient(cc grpc.ClientConnInterface) ObjectServiceClient {
	return &objectServiceClient{cc}
}

func (c *objectServiceClient) List(ctx context.Context, in *ObjectListReq, opts ...grpc.CallOption) (*Objects, error) {
	out := new(Objects)
	err := c.cc.Invoke(ctx, "/api.ObjectService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) Return(ctx context.Context, in *ObjectReturnReq, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := c.cc.Invoke(ctx, "/api.ObjectService/Return", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) Delete(ctx context.Context, in *ObjectDeleteReq, opts ...grpc.CallOption) (*api.Void, error) {
	out := new(api.Void)
	err := c.cc.Invoke(ctx, "/api.ObjectService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) NewUpload(ctx context.Context, in *ObjectNewUploadReq, opts ...grpc.CallOption) (*ObjectNewUploadResp, error) {
	out := new(ObjectNewUploadResp)
	err := c.cc.Invoke(ctx, "/api.ObjectService/NewUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) UploadPart(ctx context.Context, in *ObjectUploadPartReq, opts ...grpc.CallOption) (*api.Void, error) {
	out := new(api.Void)
	err := c.cc.Invoke(ctx, "/api.ObjectService/UploadPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) CompleteUpload(ctx context.Context, in *ObjectCompleteUploadReq, opts ...grpc.CallOption) (*api.Void, error) {
	out := new(api.Void)
	err := c.cc.Invoke(ctx, "/api.ObjectService/CompleteUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) AbortUpload(ctx context.Context, in *ObjectAbortUploadReq, opts ...grpc.CallOption) (*api.Void, error) {
	out := new(api.Void)
	err := c.cc.Invoke(ctx, "/api.ObjectService/AbortUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectServiceServer is the server API for ObjectService service.
// All implementations should embed UnimplementedObjectServiceServer
// for forward compatibility
type ObjectServiceServer interface {
	List(context.Context, *ObjectListReq) (*Objects, error)
	Return(context.Context, *ObjectReturnReq) (*Object, error)
	Delete(context.Context, *ObjectDeleteReq) (*api.Void, error)
	NewUpload(context.Context, *ObjectNewUploadReq) (*ObjectNewUploadResp, error)
	UploadPart(context.Context, *ObjectUploadPartReq) (*api.Void, error)
	CompleteUpload(context.Context, *ObjectCompleteUploadReq) (*api.Void, error)
	AbortUpload(context.Context, *ObjectAbortUploadReq) (*api.Void, error)
}

// UnimplementedObjectServiceServer should be embedded to have forward compatible implementations.
type UnimplementedObjectServiceServer struct {
}

func (UnimplementedObjectServiceServer) List(context.Context, *ObjectListReq) (*Objects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedObjectServiceServer) Return(context.Context, *ObjectReturnReq) (*Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Return not implemented")
}
func (UnimplementedObjectServiceServer) Delete(context.Context, *ObjectDeleteReq) (*api.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedObjectServiceServer) NewUpload(context.Context, *ObjectNewUploadReq) (*ObjectNewUploadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewUpload not implemented")
}
func (UnimplementedObjectServiceServer) UploadPart(context.Context, *ObjectUploadPartReq) (*api.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPart not implemented")
}
func (UnimplementedObjectServiceServer) CompleteUpload(context.Context, *ObjectCompleteUploadReq) (*api.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteUpload not implemented")
}
func (UnimplementedObjectServiceServer) AbortUpload(context.Context, *ObjectAbortUploadReq) (*api.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortUpload not implemented")
}

// UnsafeObjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectServiceServer will
// result in compilation errors.
type UnsafeObjectServiceServer interface {
	mustEmbedUnimplementedObjectServiceServer()
}

func RegisterObjectServiceServer(s grpc.ServiceRegistrar, srv ObjectServiceServer) {
	s.RegisterService(&ObjectService_ServiceDesc, srv)
}

func _ObjectService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ObjectService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).List(ctx, req.(*ObjectListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_Return_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectReturnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).Return(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ObjectService/Return",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).Return(ctx, req.(*ObjectReturnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ObjectService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).Delete(ctx, req.(*ObjectDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_NewUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectNewUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).NewUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ObjectService/NewUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).NewUpload(ctx, req.(*ObjectNewUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_UploadPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectUploadPartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).UploadPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ObjectService/UploadPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).UploadPart(ctx, req.(*ObjectUploadPartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_CompleteUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectCompleteUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).CompleteUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ObjectService/CompleteUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).CompleteUpload(ctx, req.(*ObjectCompleteUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_AbortUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectAbortUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).AbortUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ObjectService/AbortUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).AbortUpload(ctx, req.(*ObjectAbortUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectService_ServiceDesc is the grpc.ServiceDesc for ObjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ObjectService",
	HandlerType: (*ObjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ObjectService_List_Handler,
		},
		{
			MethodName: "Return",
			Handler:    _ObjectService_Return_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ObjectService_Delete_Handler,
		},
		{
			MethodName: "NewUpload",
			Handler:    _ObjectService_NewUpload_Handler,
		},
		{
			MethodName: "UploadPart",
			Handler:    _ObjectService_UploadPart_Handler,
		},
		{
			MethodName: "CompleteUpload",
			Handler:    _ObjectService_CompleteUpload_Handler,
		},
		{
			MethodName: "AbortUpload",
			Handler:    _ObjectService_AbortUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/metadata/api/src/object.proto",
}
